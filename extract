#!/bin/bash

wordFile=${1}
if [ -z "${wordFile}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing wordFile argument"
    exit 1
fi

if [ ! -f "${wordFile}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "file not found: \"${wordFile}\""
    exit 1
fi

diary=${2}
if [ -z "${diary}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing diary argument"
    exit 1
fi

imageFile=${3}
if [ -z "${imageFile}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing imageFile argument"
    exit 1
fi



REPOSITORYURL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="releases"
REPOSITORY="releases"
GROUPID="com.rsmaxwell.diary"

ARTIFACTID="extractor"

# find the latest version of the extractor jar
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    extractorJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

ARTIFACTID="diaryjson"

# find the latest version of the diaryjson jar
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    diaryjsonJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsCli Jar
stdout=$(./getJar "commons-cli" "commons-cli" "1.4")
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsCliJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsText Jar
stdout=$(./getJar "org.apache.commons" "commons-text" "1.8" )
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsTextJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsLang3 Jar
stdout=$(./getJar "org.apache.commons" "commons-lang3" "3.9" )
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsLang3Jar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonDatabind Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-databind" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonDataBindJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonCore Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-core" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonCoreJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonAnnotations Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-annotations" "2.10.2" )
result=$?
if [ ${result} -eq 0 ]; then
    jacksonAnnotationsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4j-api Jar
stdout=$(./getJar "org.slf4j" "slf4j-api" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jApiJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4jSimpleJar Jar
stdout=$(./getJar "org.slf4j" "slf4j-simple" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jSimpleJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi


#-------------------------------------------
# Extract html fragments from the word file
#-------------------------------------------
classpath="${extractorJar}:${diaryjsonJar}"
classpath="${classpath}:${apacheCommonsCliJar}:${apacheCommonsTextJar}:${apacheCommonsLang3Jar}"
classpath="${classpath}:${jacksonDataBindJar}:${jacksonCoreJar}:${jacksonAnnotationsJar}"
classpath="${classpath}:${slf4jApiJar}:${slf4jSimpleJar}"

java -cp ${classpath} com.rsmaxwell.extractor.App --word "${wordFile}" --diary "${diary}" --image "${imageFile}" 1>temp/stdout.txt 2>temp/stderr.txt
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "wordFile: ${wordFile}"
    echo "----[ stdout ]--------------------------"
    cat temp/stdout.txt
    echo "----[ stderr ]--------------------------"
    cat temp/stderr.txt
    echo "----------------------------------------"
    echo "classpath: ${classpath}"
    exit 1
fi


