#!/bin/bash

word=${1}
if [ -z "${word}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing word argument"
    exit 1
fi

fragmentsDir="input/fragments"
if [ ! -d "${fragmentsDir}" ]; then
    echo "directory not found: ${fragmentsDir}"
    exit 1
fi

root=$(jq -r '.root' "${HOME}/diary.json")
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

diary=$(jq -r '.diary' "${HOME}/diary.json")
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

wordFile="${root}/${diary}/metadata/word/${word}"
if [ ! -f "${wordFile}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "file not found: ${wordFile}"
    exit 1
fi

regex="img([0-9]{4})(-(left|right))?.docx"
if [[ ! "${word}" =~ ${regex} ]]; then
    echo "Error: $0[${LINENO}]"
    echo "wordfilename does not match pattern: ${word}"
    exit 1
fi

number="${BASH_REMATCH[1]}"
image="img${number}.jpg"
imageFile="${root}/${diary}/${image}"
if [ ! -f "${imageFile}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "file not found: ${imageFile}"
    exit 1
fi



REPOSITORYURL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="releases"
REPOSITORY="releases"
GROUPID="com.rsmaxwell.diary"

ARTIFACTID="extractor"
VERSION="0.0.107"

# find the latest version of the extractor jar
stdout=$(./getJar2 "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}" "${VERSION}" )
result=$?
if [ ${result} -eq 0 ]; then
    extractorJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

ARTIFACTID="diaryjson"
VERSION="0.0.64"

# find the latest version of the diaryjson jar
stdout=$(./getJar2 "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}" "${VERSION}" )
result=$?
if [ ${result} -eq 0 ]; then
    diaryjsonJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsCli Jar
stdout=$(./getJar "commons-cli" "commons-cli" "1.4")
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsCliJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsText Jar
stdout=$(./getJar "org.apache.commons" "commons-text" "1.8" )
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsTextJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsLang3 Jar
stdout=$(./getJar "org.apache.commons" "commons-lang3" "3.9" )
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsLang3Jar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonDatabind Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-databind" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonDataBindJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonCore Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-core" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonCoreJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonAnnotations Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-annotations" "2.10.2" )
result=$?
if [ ${result} -eq 0 ]; then
    jacksonAnnotationsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4j-api Jar
stdout=$(./getJar "org.slf4j" "slf4j-api" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jApiJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4jSimpleJar Jar
stdout=$(./getJar "org.slf4j" "slf4j-simple" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jSimpleJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

rm -rf output/fragments
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

# Extract html fragments from the word file

if [[ "$OSTYPE" == "cygwin" ]]; then
    SEP=";"
    rootJava=$(cygpath -w "${root}")
else
    SEP=":"
    rootJava=${root}
fi

echo "root:   ${root}"
echo "diary:  ${diary}"
echo "word:   ${word}"
echo "image:  ${image}"
echo "output: output"

classpath="${extractorJar}${SEP}${diaryjsonJar}"
classpath="${classpath}${SEP}${apacheCommonsCliJar}${SEP}${apacheCommonsTextJar}${SEP}${apacheCommonsLang3Jar}"
classpath="${classpath}${SEP}${jacksonDataBindJar}${SEP}${jacksonCoreJar}${SEP}${jacksonAnnotationsJar}"
classpath="${classpath}${SEP}${slf4jApiJar}${SEP}${slf4jSimpleJar}"

java -cp ${classpath} com.rsmaxwell.extractor.App --root "${rootJava}" --diary "${diary}" --word "${word}" --image "${image}" --output "output"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "root: ${root}"
    echo "rootJava: ${rootJava}"
    echo "diary: ${diary}"
    echo "imageFile: ${imageFile}"
    exit 1
fi 

cp -r output/fragments input
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

