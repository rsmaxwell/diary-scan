#!/bin/bash

inputDir=${1}
if [ -z "${inputDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing input argument"
    exit 1
fi

if [ ! -d "${inputDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "dir not found: \"${inputDir}\""
    exit 1
fi


outputDir=${2}
if [ -z "${outputDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing output argument"
    exit 1
fi

if [ ! -d "${outputDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "dir not found: \"${outputDir}\""
    exit 1
fi


year=${3}
if [ -z "${outputDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "missing year argument"
    exit 1
fi

targetFragmentsDir="${outputDir}/fragments/${year}"

if [ ! -d "${targetFragmentsDir}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "dir not found: \"${targetFragmentsDir}\""
    exit 1
fi


REPOSITORYURL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="releases"
REPOSITORY="releases"
GROUPID="com.rsmaxwell.diary"

ARTIFACTID="generator"

# find the latest version of the generator jar
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    generatorJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

ARTIFACTID="diaryjson"

# find the latest version of the diaryjson jar
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    diaryjsonJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the ApacheCommonsCli Jar
stdout=$(./getJar "commons-cli" "commons-cli" "1.4")
result=$?
if [ ${result} -eq 0 ]; then
    apacheCommonsCliJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonDatabind Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-databind" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonDataBindJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonCore Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-core" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonCoreJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the JacksonAnnotations Jar
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-annotations" "2.10.2" )
result=$?
if [ ${result} -eq 0 ]; then
    jacksonAnnotationsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf Jar
stdout=$(./getJar "com.itextpdf" "html2pdf" "2.1.6" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf forms Jar
stdout=$(./getJar "com.itextpdf" "forms" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfFormsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf kernel Jar
stdout=$(./getJar "com.itextpdf" "kernel" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfKernelJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf io Jar
stdout=$(./getJar "com.itextpdf" "io" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfIOJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf layout Jar
stdout=$(./getJar "com.itextpdf" "layout" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfLayoutJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf svg Jar
stdout=$(./getJar "com.itextpdf" "svg" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfSvgJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the itextpdf styled-xml-parser Jar
stdout=$(./getJar "com.itextpdf" "styled-xml-parser" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfStyledXmlParserJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4j-api Jar
stdout=$(./getJar "org.slf4j" "slf4j-api" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jApiJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# get the slf4j-simple Jar
stdout=$(./getJar "org.slf4j" "slf4j-simple" "2.0.0-alpha1" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jSimpleJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi







# generate PDF diaries from the day files (*.json)

classpath="${generatorJar}:${diaryjsonJar}"
classpath="${classpath}:${apacheCommonsCliJar}"
classpath="${classpath}:${jacksonDataBindJar}:${jacksonCoreJar}:${jacksonAnnotationsJar}"
classpath="${classpath}:${itextpdfJar}:${itextpdfFormsJar}:${itextpdfKernelJar}:${itextpdfIOJar}:${itextpdfLayoutJar}:${itextpdfSvgJar}:${itextpdfStyledXmlParserJar}"
classpath="${classpath}:${slf4jApiJar}:${slf4jSimpleJar}"

URL="https://server.rsmaxwell.co.uk/cgi-bin/page"

java -cp ${classpath} com.rsmaxwell.generator.App --url "${URL}" --input ${inputDir} --output ${outputDir} --year ${year} 1>temp/stdout.txt 2>temp/stderr.txt
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "inputDir: ${inputDir}"
    echo "outputDir:    ${outputDir}"
    echo "----[ stdout ]--------------------------"
    cat temp/stdout.txt
    echo "----[ stderr ]--------------------------"
    cat temp/stderr.txt
    echo "----------------------------------------"
    exit 1
fi

