#!/bin/bash

root="/media/NAS/photo/documents/sea-captains-chest"


function extractText {

    inputFilename=${1}
    if [ -z "${inputFilename}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "missing inputFilename argument"
        exit 1
    fi

    year=${2}
    if [ -z "${year}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "missing year argument"
        exit 1
    fi

    if [ ! -f "${inputFilename}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "file not found: \"${inputFilename}\""
        exit 1
    fi

    basename=$(basename "${inputFilename}" ".docx")
    pagefile="./output/pages/${basename}"

    if [ "${pagefile}" -nt "${inputFilename}" ]; then
        : # echo "page up-to-date: ${pagefile}"
    else
        echo "generating page: ${pagefile}"

        java -cp ${classpath} com.rsmaxwell.extractor.App --inputFile "${inputFilename}" --year ${year} 1>temp/stdout.txt 2>temp/stderr.txt
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "${inputFilename}"
            echo "----[ stdout ]--------------------------"
            cat temp/stdout.txt
            echo "----[ stderr ]--------------------------"
            cat temp/stderr.txt
            echo "----------------------------------------"
            exit 1
        fi
    fi
}



if [ ! -d "${root}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "root not found: [${root}]"
    exit 1
fi

dirs=()
dirs+=('diary 1828 and 1829 and jan 1830')
dirs+=('diary 1830')
dirs+=('diary 1831')
dirs+=('diary 1832')
dirs+=('diary 1834')
dirs+=('diary 1835')
dirs+=('diary 1836')
dirs+=('diary 1837')
dirs+=('diary 1838')
dirs+=('diary 1839')

rm -rf temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

REPOSITORYURL="https://server.rsmaxwell.co.uk/archiva/repository"
REPOSITORYID="releases"
REPOSITORY="releases"
GROUPID="com.rsmaxwell.diary"

ARTIFACTID="extractor"

# echo "find the latest version of the extractor jar"
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    extractorJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi
# echo "${extractorJar}"

ARTIFACTID="diaryjson"

# echo "find the latest version of the diaryjson jar"
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    diaryjsonJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi
# echo "${diaryjsonJar}"

ARTIFACTID="generator"

# echo "find the latest version of the generator jar"
stdout=$(./getLatestJar "${REPOSITORYURL}" "${REPOSITORYID}" "${REPOSITORY}" "${GROUPID}" "${ARTIFACTID}")
result=$?
if [ ${result} -eq 0 ]; then
    generatorJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the CommonsCli Jar"
stdout=$(./getJar "commons-cli" "commons-cli" "1.4")
result=$?
if [ ${result} -eq 0 ]; then
    commonsCliJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the JacksonDatabind Jar"
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-databind" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonDataBindJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the JacksonCore Jar"
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-core" "2.10.2")
result=$?
if [ ${result} -eq 0 ]; then
    jacksonCoreJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the JacksonAnnotations Jar"
stdout=$(./getJar "com.fasterxml.jackson.core" "jackson-annotations" "2.10.2" )
result=$?
if [ ${result} -eq 0 ]; then
    jacksonAnnotationsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf Jar"
stdout=$(./getJar "com.itextpdf" "html2pdf" "2.1.6" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf forms Jar"
stdout=$(./getJar "com.itextpdf" "forms" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfFormsJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf kernel Jar"
stdout=$(./getJar "com.itextpdf" "kernel" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfKernelJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf io Jar"
stdout=$(./getJar "com.itextpdf" "io" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfIOJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf layout Jar"
stdout=$(./getJar "com.itextpdf" "layout" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfLayoutJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf svg Jar"
stdout=$(./getJar "com.itextpdf" "svg" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfSvgJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the itextpdf styled-xml-parser Jar"
stdout=$(./getJar "com.itextpdf" "styled-xml-parser" "7.1.9" )
result=$?
if [ ${result} -eq 0 ]; then
    itextpdfStyledXmlParserJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi

# echo "get the slf4j-api Jar"
stdout=$(./getJar "org.slf4j" "slf4j-api" "1.7.13" )
result=$?
if [ ${result} -eq 0 ]; then
    slf4jJar=${stdout}
else
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi





# extract text from the diary pages (*.docx) into day files (*.json)

classpath="${extractorJar}:${diaryjsonJar}:${commonsCliJar}:${jacksonDataBindJar}:${jacksonCoreJar}:${jacksonAnnotationsJar}:${slf4jJar}"

for i in "${dirs[@]}"; do
    # echo "${i}"

    # Extract the text from the word files (*.docx) into the day files (*.json) 
    for file in "${root}/${i}/metadata/word"/*; do

        basename=$(basename "${file}")

        regex="^img[0-9]{4}(-(left|right))?\.docx$"
        if [[ "${basename}" =~ ${regex} ]]; then

            stdout=$("${root}/${i}/metadata/findyear" "${basename}")
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "${stdout}"
                exit 1
            fi
            year=${stdout}

 
            extractText "${file}" "${year}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                exit 1
            fi
        fi
    done

    # Copy the images to the html baseUrl directory
    for file in "${root}/${i}"/*; do

        basename=$(basename "${file}")

        regx="^img([0-9]{4})-image-.*\.(jpg|png)$"
        if [[ "${basename}" =~ ${regx} ]]; then

            dirname=$(dirname "${file}")
            script="${dirname}/metadata/findyear"
            stdout=$("${script}" "${basename}")
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "${stdout}"
                exit 1
            fi
            year=${stdout}

            # Create the html image directory
            mkdir -p "output/html/${year}/images"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                exit 1
            fi

            target="output/html/${year}/images/${basename}"
            if [ "${target}" -nt "${file}" ]; then
                : # echo "up-to-date: ${target}"
            else
                echo "updating: ${target}"
                cp "${file}" "${target}"
            fi
        fi
    done


    # Copy the image links (*.json) to the days directory
    for file in "${root}/${i}/metadata/links"/*; do
        [ -f "${file}" ] || continue

        basename=$(basename "${file}")
        target="output/days/${basename}"

        if [ "${target}" -nt "${file}" ]; then
            : # echo "up-to-date: ${target}"
        else
            echo "updating: ${target}"
            cp "${file}" "${target}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "${stdout}"
                exit 1
            fi
        fi
    done
done




echo "generate PDF diaries from the day files (*.json)"

classpath="${generatorJar}:${diaryjsonJar}:${commonsCliJar}:${jacksonDataBindJar}:${jacksonCoreJar}:${jacksonAnnotationsJar}"
classpath="${classpath}:${itextpdfJar}:${itextpdfFormsJar}:${itextpdfKernelJar}:${itextpdfIOJar}:${itextpdfLayoutJar}:${itextpdfSvgJar}:${itextpdfStyledXmlParserJar}"
classpath="${classpath}:${slf4jJar}"

java -cp ${classpath} com.rsmaxwell.generator.App --inputDir output/days --outputDir output 1>temp/stdout.txt 2>temp/stderr.txt
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${inputFilename}"
    echo "----[ stdout ]--------------------------"
    cat temp/stdout.txt
    echo "----[ stderr ]--------------------------"
    cat temp/stderr.txt
    echo "----------------------------------------"
    exit 1
fi

