#!/bin/bash



function copyFragment() {

    sourceFragmentDir=$1
    if [ -z "${sourceFragmentDir}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "No sourceFragmentDir argument supplied"
        exit 1
    fi

    targetFragmentsDir=$2
    if [ -z "${targetFragmentsDir}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "No targetFragmentsDir argument supplied"
        exit 1
    fi

    # Check the sourceFragmentDir directory exists
    if [ ! -d "${sourceFragmentDir}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "directory not found: ${sourceFragmentDir}"
        exit 1
    fi

    # Check the target directory exists
    if [ ! -d "${targetFragmentsDir}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "directory not found: ${targetFragmentsDir}"
        exit 1
    fi

    basename=$(basename ${sourceFragmentDir})
    extension="${basename##*.}"
    filename="${basename%.*}"
    targetFragmentDir="${targetFragmentsDir}/${filename}"

    # Copy the sourceFragmentDir dir to the output directory
    if [ ! -d "${targetFragmentDir}" ]; then
        echo "updating: ${targetFragmentDir}"
        mkdir -p "${targetFragmentDir}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "targetFragmentDir: ${targetFragmentDir}"
            exit 1
        fi
    fi

    src="${sourceFragmentDir}/fragment.html"
    trg="${targetFragmentDir}/fragment.html"
    if [ "${trg}" -nt "${src}" ]; then
        : # echo "up-to-date: ${trg}"
    else
        echo "updating: ${targetFragmentDir}/fragment.html"
        cp -r "${src}" "${trg}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "src: ${src}"
            echo "trg: ${trg}"
            exit 1
        fi
    fi

    src="${sourceFragmentDir}/fragment.json"
    trg="${targetFragmentDir}/fragment.json"
    if [ "${trg}" -nt "${src}" ]; then
        : # echo "up-to-date: ${trg}"
    else
        echo "updating: ${targetFragmentDir}/fragment.json"
        cp -r "${src}" "${trg}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "src: ${src}"
            echo "trg: ${trg}"
            exit 1
        fi
    fi

    # Output the dependancies
    year=$(jq '.year' "${sourceFragmentDir}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "${stdout}"
        echo "sourceFragmentDir: ${sourceFragmentDir}"
        exit 1
    fi

    makefile="output/temp/${year}.mk"
    if [ ! -f "${makefile}" ]; then
        printf "${year}.html : " > ${makefile}
    fi
    printf "\\\n    ${targetFragmentDir}/fragment.html" >> ${makefile}
    printf "\\\n    ${targetFragmentDir}/fragment.json" >> ${makefile}
    printf "\\\n    ${imageTarget}" >> ${makefile}
}







root="/media/NAS/photo/documents/sea-captains-chest"

dirs=()
dirs+=('diary-1828-and-1829-and-jan-1830')
dirs+=('diary-1830')
dirs+=('diary-1831')
dirs+=('diary-1832')
dirs+=('diary-1834')
dirs+=('diary-1835')
dirs+=('diary-1836')
dirs+=('diary-1837')
dirs+=('diary-1838')
dirs+=('diary-1839')

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
if [ ! -d "${root}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "root not found: [${root}]"
    exit 1
fi

rm -rf temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

mkdir -p "output/html/images" "output/html/css" "output/fragments" "temp"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


#-------------------------------------------
# Export the build timestamp 
#-------------------------------------------
export BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
export BUILD_YEAR=$(date '+%Y')
export BUILD_MONTH=$(date '+%m')
export BUILD_DAY=$(date '+%d')

#-------------------------------------------
# Clear the temporary directory 
#-------------------------------------------
mkdir -p output/temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

rm -rf output/temp/*
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

#-------------------------------------------
# Extract text from the diary word files (*.docx) into html fragments (*.json)
#-------------------------------------------
for i in "${dirs[@]}"; do
    echo "---[ ${i} ]------------"

    for wordFile in "${root}/${i}/metadata/word"/*.docx; do

        basename=$(basename "${wordFile}")
        extension="${basename##*.}"
        filename="${basename%.*}"

        regex="^(img[0-9]{4})(-(left|right))?\.docx$"
        if [[ ! "${basename}" =~ ${regex} ]]; then
            continue
        fi

        imageFile="pages/${i}/${BASH_REMATCH[1]}.jpg"

        makefile="output/dependancies/${filename}.mk"
        if [ -f "${makefile}" ]; then

            # Call 'make' to call the java extract program
            make --file "${makefile}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "make --file \"${makefile}\""
                exit 1
            fi
        else
            # Call the 'java' extract program directly
            ./extract "${wordFile}" "${imageFile}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                exit 1
            fi
        fi
    done

    # Copy the images and their fragments
    for file in "${root}/${i}"/*; do
        [ -f "${file}" ] || continue

        basename=$(basename "${file}")

        regx="^img([0-9]{4})-image-.*\.(jpg|png)$"
        if [[ ! "${basename}" =~ ${regx} ]]; then
            continue
        fi

        # Copy the images to the html images directory
        imageSource=${file}
        imageTarget="output/html/images/${basename}"
        if [ "${imageTarget}" -nt "${imageSource}" ]; then
            : # echo "up-to-date: ${imageTarget}"
        else
            echo "updating: ${imageTarget}"
            cp "${imageSource}" "${imageTarget}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "imageSource: ${imageSource}"
                echo "imageTarget: ${imageTarget}"
                exit 1
            fi
        fi

        extension="${basename##*.}"
        filename="${basename%.*}"

        # Copy the image fragments
        sourceFragmentDir="${root}/${i}/metadata/fragments/${filename}"
        targetFragmentsDir="./output/fragments"
        copyFragment "${sourceFragmentDir}" "${targetFragmentsDir}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "sourceFragmentDir: ${sourceFragmentDir}"
            echo "targetFragmentsDir: ${targetFragmentsDir}"
            exit 1
        fi
    done
done

# Terminate the dependancy files, and copy
for makefile in "output/temp/"*; do
    printf "\n" >> ${makefile}

    src="${makefile}"
    trg="output/dependancies/"
    cp "${src}" "${trg}"
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "src: ${src}"
        echo "trg: ${trg}"
        exit 1
    fi
done

#-------------------------------------------
# Copy the manually crafted fragments 
#-------------------------------------------
for diary in "${dirs[@]}"; do

    for fragment in "${root}/${diary}/metadata/fragments"/*; do
        [ -d "${fragment}" ] || continue

        # Copy the image fragments
        sourceFragmentDir="${fragment}"
        targetFragmentsDir="./output/fragments/"
        copyFragment "${sourceFragmentDir}" "${targetFragmentsDir}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "sourceFragmentDir: ${sourceFragmentDir}"
            echo "targetFragmentsDir: ${targetFragmentsDir}"
            exit 1
        fi
    done
done

#-------------------------------------------
# Copy the styles (*.css)
#-------------------------------------------
for file in input/styles/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/css/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "file: ${file}"
            echo "target: ${target}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Generate the HTML documents from the fragments 
#-------------------------------------------
./generate input/templates output
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

#-------------------------------------------
# Generate an index.html pointing to the diaries
#-------------------------------------------
cat << EOF > output/html/index.html
<!DOCTYPE html>
<html>

<body>

<h1>Diaries</h1>

<ul>
    <li><a href="1828.html">1828</a><br>
    <li><a href="1829.html">1829</a><br>
    <li><a href="1830.html">1830</a><br>
    <li><a href="1832.html">1832</a><br>
</ul>


</body>
</html>

EOF
