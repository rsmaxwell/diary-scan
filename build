#!/bin/bash

root="/media/NAS/photo/documents/sea-captains-chest"

dirs=()
dirs+=('diary-1828-and-1829-and-jan-1830')
dirs+=('diary-1830')
dirs+=('diary-1831')
dirs+=('diary-1832')
dirs+=('diary-1834')
dirs+=('diary-1835')
dirs+=('diary-1836')
dirs+=('diary-1837')
dirs+=('diary-1838')
dirs+=('diary-1839')

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
if [ ! -d "${root}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "root not found: [${root}]"
    exit 1
fi

rm -rf temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

mkdir -p "output/html/images" "output/html/css" "output/fragments" "temp"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


#-------------------------------------------
# Export the build timestamp 
#-------------------------------------------
export BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
export BUILD_YEAR=$(date '+%Y')
export BUILD_MONTH=$(date '+%m')
export BUILD_DAY=$(date '+%d')

#-------------------------------------------
# Extract text from the diary word files (*.docx) into html fragments (*.json)
#-------------------------------------------
for i in "${dirs[@]}"; do
    echo "---[ ${i} ]------------"

    for file in "${root}/${i}/metadata/word"/*.docx; do

        basename=$(basename "${file}")

        regex="^img[0-9]{4}(-(left|right))?\.docx$"
        if [[ "${basename}" =~ ${regex} ]]; then

            makefile="output/dependancies/${basename%.*}.mk"
            if [ -f "${makefile}" ]; then

                # Call 'make' to call the java extract program
                make --file "${makefile}"
                result=$?
                if [ ! ${result} -eq 0 ]; then
                    echo "Error: $0[${LINENO}]"
                    echo "result: ${result}"
                    echo "make --file \"${makefile}\""
                    exit 1
                fi
            else
                # Call the java extract program (which will also generate a makefile for next time round)
                echo "./extract \"${file}\""
                ./extract "${file}"
                result=$?
                if [ ! ${result} -eq 0 ]; then
                    echo "Error: $0[${LINENO}]"
                    echo "result: ${result}"
                    exit 1
                fi
            fi
        fi
    done

    # Copy the manually crafted fragments (usually links to images) straight into the fragments directory
    for file in "${root}/${i}/metadata/links"/*; do
        [ -f "${file}" ] || continue

        basename=$(basename "${file}")
        target="output/fragments/${basename}"

        if [ "${target}" -nt "${file}" ]; then
            : # echo "up-to-date: ${target}"
        else
            echo "updating: ${target}"
            cp "${file}" "${target}"
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "${stdout}"
                exit 1
            fi
        fi
    done

    # Copy the images to the html images directory
    for file in "${root}/${i}"/*; do
        [ -f "${file}" ] || continue

        basename=$(basename "${file}")

        regx="^img([0-9]{4})-image-.*\.(jpg|png)$"
        if [[ "${basename}" =~ ${regx} ]]; then

            # Copy the images to the html images directory
            target="output/html/images/${basename}"
            if [ "${target}" -nt "${file}" ]; then
                : # echo "up-to-date: ${target}"
            else
                echo "updating: ${target}"
                cp "${file}" "${target}"
            fi

            # Write out the dependancy info for this image
            fragment="${root}/${i}/metadata/fragment/${basename%.*}.json"
            if [ -f "${fragment}" ]; then
                year=$(jq '.year' "${fragment}")
                result=$?
                if [ ! ${result} -eq 0 ]; then
                    echo "Error: $0[${LINENO}]"
                    echo "result: ${result}"
                    echo "${stdout}"
                    exit 1
                fi

                echo ${basename} > "output/fragments/${year}.dep"
            else
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "missing fragment for image file: ${fragment}"
                exit 1
            fi
        fi
    done
done

# Copy the styles (*.css) to the html css directory
for file in data/styles/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/css/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "${stdout}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
./generate
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi
