#!/bin/bash



function copyFragment() {

    fragment=$1
    if [ -z "${fragment}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "No fragment argument supplied"
        exit 1
    fi

    if [ ! -d "${fragment}" ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "dir not found: ${fragment}"
        exit 1
    fi

    year=$(jq -r '.year' "${fragment}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "fragment: ${fragment}"
        exit 1
    fi

    month=$(jq -r '.month' "${fragment}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "fragment: ${fragment}"
        exit 1
    fi

    day=$(jq -r '.day' "${fragment}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "fragment: ${fragment}"
        exit 1
    fi

    order=$(jq -r '.order' "${fragment}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "fragment: ${fragment}"
        exit 1
    fi

    month2=$(printf "%02d" ${month})
    targetFragmentsDir="output/fragments/${year}/${month2}"
    targetHtmlDir="output/html/"

    # Make sure the target fragment directory exists
    mkdir -p "${targetFragmentsDir}"
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "targetFragmentsDir: ${targetFragmentsDir}"
        exit 1
    fi

    # Make sure the target html exists
    mkdir -p "${targetHtmlDir}"
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "targetHtmlDir: ${targetHtmlDir}"
        exit 1
    fi

    day2=$(printf "%02d" ${day})
    basename=$(basename ${fragment})
    filename="${day2}-${order}-${basename%.*}"
    targetFragment="${targetFragmentsDir}/${filename}"

    mkdir -p "${targetFragment}"
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "targetFragment: ${targetFragment}"
        exit 1
    fi

    rsync --archive --quiet --exclude '**/@*' --exclude '**/images' ${fragment}/ ${targetFragment}
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "targetFragment: ${targetFragment}"
        exit 1
    fi

# doit=true
# if [ ${year} -ne 1830 ]; then doit=false; fi
# if [ ${month} -ne 8 ]; then doit=false; fi
# if [ ${day} -ne 10 ]; then doit=false; fi
# if [ ${doit} == true ]; then
#     echo "-----------------------------------------------------------------"
#     echo ${targetFragment}
#     tree ${targetFragment}
#     set -x
# fi

    targetHtmlImages="output/html/images"
    list="[]"
    readarray -d '' array < <(find ${fragment} \( -iname "*.jpeg" -or -iname "*.jpg" -or -iname "*.png" \) -print0)
    for i in "${array[@]}"; do
        imagename=$(basename ${i})

        if [[ "${i}" == *"/@eaDir/"* ]]; then
            continue
        fi

        list=$(echo ${list} | jq --arg name ${imagename} '. += [ $name ]')
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "fragment: ${fragment}"
            exit 1
        fi

        cp ${fragment}/images/${imagename} ${targetHtmlImages}
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            exit 1
        fi
    done

    output=$(jq --argjson groupInfo "${list}" '.images += $groupInfo' "${targetFragment}/fragment.json")
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "fragment: ${fragment}"
        exit 1
    fi

    echo ${output} > "${targetFragment}/fragment.json"

# if [ ${doit} == true ]; then
#     echo "... exiting ..."
#     exit 99
# fi
}







root="/media/NAS/photo/documents/sea-captains-chest"

dirs=()
dirs+=('diary-1828-and-1829-and-jan-1830')
dirs+=('diary-1830')
dirs+=('diary-1831')
dirs+=('diary-1832')
dirs+=('diary-1834')
dirs+=('diary-1835')
dirs+=('diary-1836')
dirs+=('diary-1837')
dirs+=('diary-1838')
dirs+=('diary-1839')

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
if [ ! -d "${root}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "root not found: [${root}]"
    exit 1
fi

rm -rf temp output
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

mkdir -p "output/html/images" "output/html/css" "output/html/scripts" "output/html/controls" "output/fragments" "temp"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


#-------------------------------------------
# Export the build timestamp 
#-------------------------------------------
export BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
export BUILD_YEAR=$(date '+%Y')
export BUILD_MONTH=$(date '+%m')
export BUILD_DAY=$(date '+%d')

#-------------------------------------------
# Clear the temporary directory 
#-------------------------------------------
mkdir -p output/temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

rm -rf output/temp/*
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

#-------------------------------------------
# Extract fragments from word documents
#-------------------------------------------
for diary in "${dirs[@]}"; do
    echo "---[ from word: ${diary} ]------------------------"

    # Extract text from the diary word files (*.docx) into html fragments
    for wordFile in "${root}/${diary}/metadata/word"/*.docx; do

        echo "wordfile: $(basename ${wordFile})"

        basename=$(basename "${wordFile}")
        extension="${basename##*.}"
        filename="${basename%.*}"

        regex="^(img[0-9]{4})(-(left|right))?\.docx$"
        if [[ ! "${basename}" =~ ${regex} ]]; then
            continue
        fi

        # imageFile="pages/${diary}/${BASH_REMATCH[1]}.jpg"
        imageFile="${BASH_REMATCH[1]}.jpg"

        # Call the extract program
        ./extract "${wordFile}" "${diary}" "${imageFile}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            exit 1
        fi
    done
done

#-------------------------------------------
# Copy the manually crafted fragments 
#-------------------------------------------
for diary in "${dirs[@]}"; do
    echo "---[ manual: ${diary} ]----------------------------"

    for fragment in "${root}/${diary}/metadata/fragments"/*; do

        if [ ! -f "${fragment}/fragment.json" ]; then
            continue
        fi

        copyFragment "${fragment}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "fragment: ${fragment}"
            exit 1
        fi
    done
done

#-------------------------------------------
# Copy the styles (*.css)
#-------------------------------------------
for file in input/styles/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/css/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "file: ${file}"
            echo "target: ${target}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Copy the scripts (*.js)
#-------------------------------------------
for file in input/scripts/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/scripts/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "file: ${file}"
            echo "target: ${target}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Copy the control images
#-------------------------------------------
for file in input/controls/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/controls/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "file: ${file}"
            echo "target: ${target}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Generate the HTML documents from the fragments 
#-------------------------------------------
for dir in output/fragments/*; do
    [ -d "${dir}" ] || continue

    year=$(basename ${dir})

    echo "generating diary for year: ${year}"
    ./generate input/templates output ${year}
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        exit 1
    fi
done

#-------------------------------------------
# Generate an index.html pointing to the diaries
#-------------------------------------------
cat << EOF > output/html/index.html
<!DOCTYPE html>
<html>

<body>

<h1>Diaries</h1>

<ul>
    <li><a href="1828.html">1828</a><br>
    <li><a href="1829.html">1829</a><br>
    <li><a href="1830.html">1830</a><br>
    <li><a href="1832.html">1832</a><br>
</ul>


</body>
</html>

EOF
