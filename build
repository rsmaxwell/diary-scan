#!/bin/bash

root="/media/NAS/photo/documents/sea-captains-chest"

dirs=()
dirs+=('diary-1828-and-1829-and-jan-1830')
dirs+=('diary-1830')
dirs+=('diary-1831')
dirs+=('diary-1832')
dirs+=('diary-1834')
dirs+=('diary-1835')
dirs+=('diary-1836')
dirs+=('diary-1837')
dirs+=('diary-1838')
dirs+=('diary-1839')

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
if [ ! -d "${root}" ]; then
    echo "Error: $0[${LINENO}]"
    echo "root not found: [${root}]"
    exit 1
fi

rm -rf temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi

mkdir -p "output/html/images" "output/html/css" "output/fragments" "temp"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    exit 1
fi


#-------------------------------------------
# Export the build timestamp 
#-------------------------------------------
export BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
export BUILD_YEAR=$(date '+%Y')
export BUILD_MONTH=$(date '+%m')
export BUILD_DAY=$(date '+%d')

#-------------------------------------------
# Clear the temporary directory 
#-------------------------------------------
mkdir -p output/temp
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

rm -rf output/temp/*
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "make --file \"${makefile}\""
    exit 1
fi

#-------------------------------------------
# Extract text from the diary word files (*.docx) into html fragments (*.json)
#-------------------------------------------
for i in "${dirs[@]}"; do
    echo "---[ ${i} ]------------"

    for file in "${root}/${i}/metadata/word"/*.docx; do

        basename=$(basename "${file}")

        regex="^img[0-9]{4}(-(left|right))?\.docx$"
        if [[ "${basename}" =~ ${regex} ]]; then
            makefile="output/dependancies/${basename%.*}.mk"

            if [ -f "${makefile}" ]; then

                # Call 'make' to call the java extract program
                make --file "${makefile}"
                result=$?
                if [ ! ${result} -eq 0 ]; then
                    echo "Error: $0[${LINENO}]"
                    echo "result: ${result}"
                    echo "make --file \"${makefile}\""
                    exit 1
                fi
            else
                # Call the java extract program (which will also generate a makefile for next time round)
                ./extract "${file}"
                result=$?
                if [ ! ${result} -eq 0 ]; then
                    echo "Error: $0[${LINENO}]"
                    echo "result: ${result}"
                    exit 1
                fi
            fi
        fi
    done

    # Copy the images and their fragments
    for file in "${root}/${i}"/*; do
        [ -f "${file}" ] || continue

        basename=$(basename "${file}")

        regx="^img([0-9]{4})-image-.*\.(jpg|png)$"
        if [[ "${basename}" =~ ${regx} ]]; then

            # Copy the images to the html images directory
            imageSource=${file}
            imageTarget="output/html/images/${basename}"
            if [ "${imageTarget}" -nt "${imageSource}" ]; then
                : # echo "up-to-date: ${imageTarget}"
            else
                echo "updating: ${imageTarget}"
                cp "${imageSource}" "${imageTarget}"
            fi

            extension="${basename##*.}"
            filename="${basename%.*}"

            # Check the image fragment exists
            fragment="${root}/${i}/metadata/fragments/${filename}"
            if [ ! -d "${fragment}" ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "missing fragment for image file: ${fragment}"
                exit 1
            fi

            # Copy the image fragment dir to the output directory
            target="output/fragments/${filename}"
            if [ "${target}" -nt "${fragment}" ]; then
                : # echo "up-to-date: ${target}"
            else
                echo "updating: ${target}"
                mkdir -p "${target}"
            fi

            src="${fragment}/fragment.html"
            trg="${target}/fragment.html"
            if [ "${trg}" -nt "${src}" ]; then
                : # echo "up-to-date: ${trg}"
            else
                echo "updating: ${target}"
                cp -r "${src}" "${trg}"
            fi

            src="${fragment}/fragment.json"
            trg="${target}/fragment.json"
            if [ "${trg}" -nt "${src}" ]; then
                : # echo "up-to-date: ${trg}"
            else
                echo "updating: ${target}"
                cp -r "${src}" "${trg}"
            fi

            # Output the dependancies
            year=$(jq '.year' "${fragment}/fragment.json")
            result=$?
            if [ ! ${result} -eq 0 ]; then
                echo "Error: $0[${LINENO}]"
                echo "result: ${result}"
                echo "${stdout}"
                echo "fragment: ${fragment}"
                exit 1
            fi

            makefile="output/temp/${year}.mk"
            if [ ! -f "${makefile}" ]; then
                printf "${year}.html : " > ${makefile}
            fi
            printf "\\\n    ${target}/fragment.html" >> ${makefile}
            printf "\\\n    ${target}/fragment.json" >> ${makefile}
            printf "\\\n    ${imageTarget}" >> ${makefile}
        fi
    done
done

# Terminate the dependancy files, and copy
for makefile in "output/temp/"*; do
    printf "\n" >> ${makefile}

    cp ${makefile} "output/dependancies/"
    result=$?
    if [ ! ${result} -eq 0 ]; then
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "${stdout}"
        exit 1
    fi
done

#-------------------------------------------
# Copy the manually crafted fragments 
#-------------------------------------------
for i in "${dirs[@]}"; do
    source="${root}/${i}/metadata/fragments"/*
    target="output/fragments/"
    cp -r ${source} ${target} 1>/dev/null 2>/dev/null
    result=$?
    if [ ${result} -eq 0 ]; then
        : # ok
    elif [ ${result} -eq 1 ]; then
        : # ok
    else
        echo "Error: $0[${LINENO}]"
        echo "result: ${result}"
        echo "${stdout}"
        exit 1
    fi
done

#-------------------------------------------
# Copy the styles (*.css)
#-------------------------------------------
for file in input/styles/*; do
    [ -f "${file}" ] || continue

    basename=$(basename "${file}")

    target="output/html/css/${basename}"
    if [ "${target}" -nt "${file}" ]; then
        : # echo "up-to-date: ${target}"
    else
        echo "updating: ${target}"
        cp "${file}" "${target}"
        result=$?
        if [ ! ${result} -eq 0 ]; then
            echo "Error: $0[${LINENO}]"
            echo "result: ${result}"
            echo "${stdout}"
            exit 1
        fi
    fi
done

#-------------------------------------------
# Check, clear and make directories 
#-------------------------------------------
./generate
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result: ${result}"
    echo "${stdout}"
    exit 1
fi
